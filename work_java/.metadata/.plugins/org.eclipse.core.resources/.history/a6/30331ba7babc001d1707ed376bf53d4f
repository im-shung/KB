import java.io.*;
import java.util.*;

public class Main {

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static int N, target;
	static int[] arr;

	public static void main(String[] args) throws Exception, IOException {
		N = Integer.parseInt(br.readLine());
		arr = new int[100_001];
		StringTokenizer st = new StringTokenizer(br.readLine());

		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}
		target = Integer.parseInt(br.readLine());

		long pro1 = pro1();
		if (pro1 > 0) { // 양수가 리턴되면 모든 요청이 배정될 수 있다.
			System.out.println(pro1);
		} else { // 아니라면 예산 금액을 초과하는 경우.
			System.out.println(pro2());
		}

	}

	public static int pro1() {
		long sum = 0;
		int max = 0;
		for (int i = 0; i < N; i++) {
			max = Math.max(arr[i], max);
			sum += arr[i];
		}

		if (sum <= target)
			return max;
		else
			return -1;
	}

	public static long pro2() {
		long start = N;
		long end = target;

		// answer := 상한액
		long answer = 0;

		// 원하는 값이 k를 초과한 값이 처음 나오는 위치를 찾는 과정
		// 상한액을 적용한 예산이 기존 예산을 초과할 때 break
		while (start < end) {
			long bound = (start + end) / 2;
			long sum = getSum(bound);
			
			System.out.println("start = " + start + ", end = " + end);
			System.out.println("sum = " + sum + ", bound = " + bound);
			
			if (target < sum) {
				end = bound - 1;
			} else {
				start = bound + 1;
			}
		}

		return end;
	}

	public static long getSum(long bound) {
		long sum = 0;
		for (int val : arr) {
			if (val > bound)
				sum += bound;
			else
				sum += val;
		}
		return sum;
	}
}
